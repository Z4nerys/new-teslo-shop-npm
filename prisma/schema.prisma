generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  //esta es la relacion con category 
  //en la tabla Product. 
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String? //puede ser null con ?
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  //Relaciones
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]

  @@index([gender]) //esto es para buscar por indice, es mas rapido
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  // relaciones
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  emailVerfied DateTime?
  password     String
  role         Role      @default(user)
  image        String?

  //relacion 1 a 1
  //con user User @relation(fields: [userId], references: [id])
  //userId String @unique
  //que esta en la tabla userAddress
  address UserAddress?
}

model Country {
  id          String        @id
  name        String
  //relacion 1 a muchos con la tabla de abajo
  UserAddress UserAddress[]
}

//para a√±adir a la db
//npx prisma migrate dev
//para agregar algo puntual
//npx prisma migrate dev --name user-role
// npx prisma migrate dev --name country
// el --name y-algo-aca es para ponerle un nombre al cambio
//tipo commit

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String

  // Relaciones
  //relacion 1 a muchos. userAddress de arriba
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  //con UserAddress UserAddress[] que esta en la tabla de arriba

  //relacion 1 a 1
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}
